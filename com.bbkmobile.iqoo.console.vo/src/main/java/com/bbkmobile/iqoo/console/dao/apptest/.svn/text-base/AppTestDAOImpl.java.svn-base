package com.bbkmobile.iqoo.console.dao.apptest;

import java.io.File;
import java.util.Date;
import java.util.List;
import org.hibernate.Criteria;
import org.hibernate.HibernateException;
import org.hibernate.Session;
import org.hibernate.criterion.Order;
import org.hibernate.criterion.Restrictions;
import org.springframework.orm.hibernate3.HibernateCallback;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;
import com.bbkmobile.iqoo.console.constants.UtilTool;
import com.bbkmobile.iqoo.console.dao.appinfo.AppInfo;
import com.bbkmobile.iqoo.console.dao.login.BbkAdminUser;

public class AppTestDAOImpl extends HibernateDaoSupport implements AppTestDAO {

    public boolean updateAppInfo(AppInfo appInfo) throws Exception{
        String updateSql = "update t_app_info set appVersion='"+appInfo.getAppVersion() + "',appVersionCode='"+appInfo.getAppVersionCode()+"' where id="+appInfo.getAd_id();
        getSession().createSQLQuery(updateSql).executeUpdate();
        return true;
    }
	/**
	 * 查询应用，获取符合条件的记录的总数，为分页服务
	 */
	@SuppressWarnings("unchecked")
	@Override
	public int countAllRecords(final AppInfo appInfo) throws Exception {
		int result = 0;
		List<AppInfo> list = this.getHibernateTemplate().executeFind(
				new HibernateCallback() {
					public Object doInHibernate(Session session)
							throws HibernateException {
						Criteria criteria = session
								.createCriteria(AppInfo.class);
//						if (null != appInfo.getAppType()
//								&& null != appInfo.getAppType().getId()) {
//							criteria.add(Restrictions.eq("appType",
//									appInfo.getAppType()));
//						}
						if (null != appInfo.getAppType()
								&& null != appInfo.getAppType().getId() 
								&& -1 != appInfo.getAppType().getId().intValue()
								&& 0 != appInfo.getAppType().getId().intValue()) {
							criteria.add(Restrictions.eq("appType",
									appInfo.getAppType()));
						}
						if (null != appInfo.getId()) {
							criteria.add(Restrictions.eq("id", appInfo.getId()));
						}
						if (!UtilTool.checkStringNull(appInfo.getAppCnName())) {
							criteria.add(Restrictions.like("appCnName", "%"
									+ appInfo.getAppCnName() + "%"));
						}
						if (!UtilTool.checkStringNull(appInfo.getAppAuthor())) {
							criteria.add(Restrictions.like("appAuthor", "%"
									+ appInfo.getAppAuthor() + "%"));
						}

						if (!UtilTool.checkStringNull(appInfo.getDeveloper()
								.getName())) {
							Criteria dev_criteria = criteria.createCriteria(
									"developer", Criteria.LEFT_JOIN);
							dev_criteria.add(Restrictions.like("name", "%"
									+ appInfo.getDeveloper().getName() + "%"));
						}
//						if (appInfo.getType() != 0) {
//							appInfo.getAppType().setId(appInfo.getType());
//							criteria.add(Restrictions.eq("appType",
//									appInfo.getAppType()));
//						}
						if (appInfo.getType() != 0&&appInfo.getType() != -1) {
							criteria.add(Restrictions.eq("appType.id",
									appInfo.getType()));
						}
						if (null != appInfo.getFrom_date()) {
							criteria.add(Restrictions.between("updateDate",
									appInfo.getFrom_date(),
									appInfo.getTo_date()));
						}
						if (null != appInfo.getSellType()) {
							criteria.add(Restrictions.eq("sellType",
									appInfo.getSellType()));
						}
//						if (null != appInfo.getStatus_select()) {
//							appInfo.setAppStatus(appInfo.getStatus_select());
//							criteria.add(Restrictions.eq("appStatus",
//									appInfo.getAppStatus()));
//						}
						if (null != appInfo.getStatus_select()
								&&appInfo.getStatus_select().intValue()!=0&&appInfo.getStatus_select().intValue()!=-1) {
							criteria.add(Restrictions.eq("appStatus",
									appInfo.getStatus_select()));
						}
						if (null != appInfo.getAppStatus()) {

							criteria.add(Restrictions.eq("appStatus",
									appInfo.getAppStatus()));
						} else {
							criteria.add(Restrictions.or(Restrictions.eq(
									"appStatus", (short) 5), Restrictions.or(
									Restrictions.eq("appStatus", (short) 7),
											Restrictions.eq("appStatus",
													(short) 8))));
							
						}

						List<AppInfo> result = criteria.list();
						return result;
					}
				});
		if (null != list) {
			result = list.size();
		}
		return result;

	}

	/**
	 * 根据用户输入动态组织查询查询条件，查询符合条件的测试列表信息
	 */
	@Override
	public List<AppInfo> findTestByProperty(final int start, final AppInfo appInfo)
			throws Exception {

		@SuppressWarnings({ "unchecked", "rawtypes" })
		List<AppInfo> list = this.getHibernateTemplate().executeFind(
				new HibernateCallback() {
					public Object doInHibernate(Session session)
							throws HibernateException {
						Criteria criteria = session
								.createCriteria(AppInfo.class);

//						if (null != appInfo.getAppType()
//								&& null != appInfo.getAppType().getId() && 0 != appInfo.getAppType().getId()) {
//							criteria.add(Restrictions.eq("appType",
//									appInfo.getAppType()));
//						}
						if (null != appInfo.getAppType()
								&& null != appInfo.getAppType().getId() 
								&& -1 != appInfo.getAppType().getId().intValue()
								&& 0 != appInfo.getAppType().getId().intValue()) {
							criteria.add(Restrictions.eq("appType",
									appInfo.getAppType()));
						}
						if (null != appInfo.getId()) {
							criteria.add(Restrictions.eq("id", appInfo.getId()));
						}
						if (!UtilTool.checkStringNull(appInfo.getAppCnName())) {
							criteria.add(Restrictions.like("appCnName", "%"
									+ appInfo.getAppCnName() + "%"));
						}
						if (!UtilTool.checkStringNull(appInfo.getAppAuthor())) {
							criteria.add(Restrictions.like("appAuthor", "%"
									+ appInfo.getAppAuthor() + "%"));
						}

						if (!UtilTool.checkStringNull(appInfo.getDeveloper()
								.getName())) {
							Criteria dev_criteria = criteria.createCriteria(
									"developer", Criteria.LEFT_JOIN);
							dev_criteria.add(Restrictions.like("name", "%"
									+ appInfo.getDeveloper().getName() + "%"));
						}
//						if (appInfo.getType() != 0) {
//							appInfo.getAppType().setId(appInfo.getType());
//							criteria.add(Restrictions.eq("appType",
//									appInfo.getAppType()));
//						}
						if (appInfo.getType() != 0&&appInfo.getType() != -1) {
							criteria.add(Restrictions.eq("appType.id",
									appInfo.getType()));
						}
//						if (null != appInfo.getStatus_select()) {
//							appInfo.setAppStatus(appInfo.getStatus_select());
//							criteria.add(Restrictions.eq("appStatus",
//									appInfo.getAppStatus()));
//						}
						if (null != appInfo.getStatus_select()
								&&appInfo.getStatus_select().intValue()!=0&&appInfo.getStatus_select().intValue()!=-1) {
							criteria.add(Restrictions.eq("appStatus",
									appInfo.getStatus_select()));
						}
						if (null != appInfo.getFrom_date()) {
							criteria.add(Restrictions.between("updateDate",
									appInfo.getFrom_date(),
									appInfo.getTo_date()));
						}
						if (null != appInfo.getSellType()) {
							criteria.add(Restrictions.eq("sellType",
									appInfo.getSellType()));
						}
						if (null != appInfo.getAppStatus()) {
							criteria.add(Restrictions.eq("appStatus",
									appInfo.getAppStatus()));
						} else {
							criteria.add(Restrictions.or(Restrictions.eq(
									"appStatus", (short) 5), Restrictions.or(
									Restrictions.eq("appStatus", (short) 7),
											Restrictions.eq("appStatus",
													(short) 8))));
						}
						criteria.addOrder(Order.asc("id"));
						criteria.setFirstResult(start);
						criteria.setMaxResults(10);
						List<AppInfo> result = criteria.list();
						return result;
					}
				});
		return list;
	}

	/**
	 * 根据ID找到相应的应用信息
	 */
	@Override
	public AppInfo findAppById(final Long app_id) throws Exception {
		// TODO Auto-generated method stub
		return getHibernateTemplate().load(AppInfo.class, app_id);
	}

	/**
	 * 改变测试状态（1.“测试未通过“  2.“测试完待发“），并保存测试记录。  
	 */
	@Override
	public boolean updateForTest(final AppTestRecords appTestRecords, final Integer userId)
			throws Exception {
		// TODO Auto-generated method stub
		boolean result = false;

		AppInfo appInfo = findAppById(appTestRecords.getAppInfo().getId());

		if (null != appInfo) {
			short appStatus = 4;
			if (appTestRecords.getTestStatus() == '1') {
				appStatus = 6;
			} else {
				appStatus = 5;
			}
			appInfo.setAppStatus(appStatus);
			appTestRecords.setAppInfo(appInfo);
			BbkAdminUser testUser = getHibernateTemplate().load(
					BbkAdminUser.class, userId);
			appTestRecords.setTestUser(testUser);
			appTestRecords.setTestDate(new Date());
			getHibernateTemplate().save(appTestRecords);
			result = true;
		}
		return result;
	}

	/**
	 * 保存测试报告文档到设定的目录下
	 */
	@Override
	public boolean saveTestReport(File file, String fileName, String path) throws Exception {
		// TODO Auto-generated method stub
		try{
			 java.io.InputStream input = new java.io.FileInputStream(file); 
			  java.io.OutputStream output = new java.io.FileOutputStream(path +"/"+fileName); 
			 byte buffer[] = new byte[8192]; 
			 int count = 0; 
			 while((count = input.read(buffer)) > 0) 
			 {
			  output.write(buffer, 0, count); 
			 } 
			  output.close(); 
			  input.close(); 
		}catch (Exception e) {
			// TODO: handle exception
			throw e;
		}
		return true;
	}

	/**
	 * 根据应用查找相应的测试记录
	 */
	@SuppressWarnings("unchecked")
	@Override
	public List<AppTestRecords> getTestRecords(AppInfo appInfo) throws Exception {
		// TODO Auto-generated method stub
		return getHibernateTemplate().find("from AppTestRecords where appInfo=?", appInfo);
		
	}

	@SuppressWarnings("unchecked")
	@Override
	public List<AppInfo> findAllTestAppType() throws Exception {
		// TODO Auto-generated method stub
		List<AppInfo> list = this.getHibernateTemplate().executeFind(
				new HibernateCallback() {
					public Object doInHibernate(Session session)
							throws HibernateException {
						Criteria criteria = session
								.createCriteria(AppInfo.class);

							criteria.add(Restrictions.or(Restrictions.eq(
									"appStatus", (short) 5), Restrictions.or(
									Restrictions.eq("appStatus", (short) 7),Restrictions.eq(
											"appStatus", (short) 8))));
						
						List<AppInfo> result = criteria.list();
						return result;
					}
				});
		return list;
	}
}
